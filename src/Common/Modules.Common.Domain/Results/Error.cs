namespace Modules.Common.Domain.Results;

// A readonly record struct is efficient and immutable
public readonly record struct Error
{
    // Private constructor ensures errors are created via factory methods
    private Error(string code, string description, ErrorType type)
    {
        Code = code;
        Description = description;
        Type = type;
        NumericType = (int)type; // Store numeric type too
    }

    // Constructor for custom error types
    private Error(string code, string description, int numericType)
    {
        Code = code;
        Description = description;
        NumericType = numericType;
        Type = ErrorType.Custom; // Mark as Custom type
    }

    /// <summary>
    /// Gets the unique error code (e.g., "Users.NotFound").
    /// </summary>
    public string Code { get; }

    /// <summary>
    /// Gets the error description (e.g., "User with ID 123 not found").
    /// </summary>
    public string Description { get; }

    /// <summary>
    /// Gets the enum error type.
    /// </summary>
    public ErrorType Type { get; }

    /// <summary>
    /// Gets the numeric value of the type.
    /// </summary>
    public int NumericType { get; }

    // --- Factory Methods for Standard Error Types ---

    public static Error Failure(string code, string description) =>
        new(code, description, ErrorType.Failure);

    public static Error Unexpected(string code, string description) =>
        new(code, description, ErrorType.Unexpected);

    public static Error Validation(string code, string description) =>
        new(code, description, ErrorType.Validation);

    public static Error Conflict(string code, string description) =>
        new(code, description, ErrorType.Conflict);

    public static Error NotFound(string code, string description) =>
        new(code, description, ErrorType.NotFound);

    public static Error Unauthorized(string code, string description) =>
        new(code, description, ErrorType.Unauthorized);

    public static Error Forbidden(string code, string description) =>
        new(code, description, ErrorType.Forbidden);

    // --- Factory Method for Custom Error Types ---

    public static Error Custom(int type, string code, string description) =>
        new(code, description, type);

    // --- Equality Implementation (Generated by record struct) ---
    public bool Equals(Error other)
    {
        return Type == other.Type &&
               NumericType == other.NumericType &&
               Code == other.Code &&
               Description == other.Description;
    }

    public override int GetHashCode() => HashCode.Combine(Code, Description, Type, NumericType);
}